package basic1;

// # 예외처리
// 예외 => 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류
// 예외는 예외처리(exception handling)를 통해 프로그램을 종료하지 않고 정상 실행 상태가 유지되도록 할 수 있다.

// # 예외
// 1. 일반 예외(exception) = 컴파일러 체크 예외
//    => 프로그램 실행시 예외가 발생할 가능성이 높기 때문에 자바 소스를 컴파일하는 과정에서 해당 예외 처리 코드가 있는지 검사한다
//       만약 예외 처리 코드가 없다면 컴파일 오류가 발생한다
// 2. 실행 예외(runtime exception) = 컴파일 넌 체크 예외
//   => 실행 시 예측할 수 없이 갑자기 발생하기 때문에 컴파일하는 과정에서 예외 처리 코드가 있는지 검사하지 않는다.

// 자바에서는 예외를 클래스로 관리한다.
// JVM은 프로그램을 실행하는 도중에 예외가 발생하면 해당 클래스로 객체를 생성한다.
// 그리고 나서 예외 처리 코드에서 예외 객체를 이용할 수 있도록 해준다.
// 모든 얘외 클래스는 java.lang.Exception 클래스를 상속 받는다.

// 중요!!!)
// 일반 예외와 실행 예외 클래스는 RuntimeException 클래스를 기준으로 구별한다
// RuntimeException의 하위 클래스가 아니면 일반 예외 클래스이고,
// 하위 클래스이면 실해 예외 클래스이다.
// 클래스 상속 관계에서 부모(조상)에 RuntimeException이 있다면 실행 예외 클래스이다.

// 실행 예외는 자바 컴파일러가 체크하지 않기 때문에 오로지 개발자의 경험에 의해서 예외 처리 코드를 작성해야 한다.
// 만약 개발자가 실행 예외에 대해 예외 처리 코드를 넣지 않았을 경우, 해당 예외가 발생하면 프로그램은 곧바로 종료된다.

// # 자주 발생되는 실행예외
// 1. NullPointerException
// => 객체 참조가 없는 상태, 즉 null 값을 갖는 참조 변수로 객체 접근 연산자인 도트(.)를 사용했을 때 발생
// 2. ArrayIndexOutOfBoundsException
// => 배열에서 인덱스 범위를 초과할 경우
// 3. NumberFormatException
// => 프로그램을 개발하다 보면 문자열로 되어 있는 데이터를 숫자로 변경하는 경우가 자주 발생한다
//    Integer.parseInt("1234"),	Double.parseDouble("123.22")
//    숫자로 변환될 수 없는 문자가 포함되면 발생한다
//    parseXXX()메소드는 Wrapper클래스의 정적메소드이다.
// 4. ClassCastException
// => 타입 변환(Casting)은 상위 클래스와 하위 클래스 간에 발생하고 구현클래스와 인터페이스 간에도 발생한다
//    이러한 관계가 아니라면 클래스는 다른 타입으로 변환할 수 없기때문에 ClassCastException이 발생한다
//    ClassCastException을 발생시키지 않으려면 타입 변환 전에 변환이 가능한지 instanceof 연산자로 확인하는 것이 좋다.
public class srcK {

	public static void main(String[] args) {

	}

}

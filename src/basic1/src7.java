package basic1;

// # final 필드의 초기값을 줄수 있는 방법
// => 1. 필드 선언시에 주는 방법 
//    2. 생성자에서 주는 방법

// # 패키지
// 패키지의 물리적인 형태는 파일 시스템의 폴더이다.
// 클래스 이름이 동일하더라도 패키지가 다르면 다른 클래스로 인식한다
// 클래스의 전체 이름은 '패키지 이름 + 클래스 이름'인데 패키지가 상,하위로 구분되어 있다면 도트(.)를 사용해서 표현한다
// ex) 상위패키지.하위패키지.클래스
// 패키지 이름은 모두 소문자로 작성하는 것이 관례
// 회사들 간에 패키지가 서로 중복되지 않도록 흔히 회사의 도메인 이름으로 패키지를 만든다.
// 도메인은 등록기관에서 유일한 이름이 되도록 검증되었기 때문에 도메인 이름으로 패키지를 만들면 다르 회사의 패키지와
// 중복되는 경우가 발생하지 않는다.
// 도메인 이름으로 패키지를 만들 경우, 도메인 이름 역순으로 패키지 이름을 지어주는데
// 그 이유는 포괄적인 이름이 상위 패키지가 되도록 하기 위해서이다.
// ex) com.samsung.projectname, com.hyundai.projectname, com.lg.projectname


// # import문
// 사용하고자 하는 클래스 또는 인터페이스가 다른 패키지에 소속되어있다면
// 만약 사용하고자 하는 클래스들이 동일한 패키지 소속이라면 개별 import문을 작성하는 것보다 *를 이용해서 해당 패키지에
// 소속된 클래스들을 사용하는 것이 낫다.
// 주의할 점은 상위 패키지를 import했다고 해서 하위 패키지까지 import되는 것은 아니다.
// (자바는 패키지 전체 이름으로 패키지를 식별하기 때문에 com.hankook과 com.hankook.project를 서로 다른 패키지로 인식)
// 경우에 따라서는 import문과 상관없이 패키지가 포함된 클래스 전체이름을 코드에 기술해야 할때가 있다.
// 서로 다른 패키지에 동일한 클래스 이름이 존재하고, 두 패키지가 모두 import되는 경우,
// 컴파일러는 어떤 패키지의 클래스를 사용해야 할지 모호해지므로 패키지가 포함된 클래스 전체 이름을 기술해야 한다.
// ex) sec06.exam02.hankook.Tire    sec06.exam02.kumho.Tire
// 단축키 => ctrl + shift + o (source -> Organize imports)

// # 접근 제한자
// private < default < protected < public
// 클래스를 다른 개발자가 사용할 수 있도록 라이브러리 클래스로 개발한다면 반드시 public 접근 제한을 갖도록 해야 한다.
// 인터넷에 배포되는 라이브러리 클래스도 모두 public 접근 제한을 가지고 있다.
// 클래스에 생성자를 선언하지 않으면 컴파일러에 의해 자동으로 기본 생성자가 추가되는데,
// 자동으로 생성되는 기본 생성자의 접근 제한은 클래스의 접근 제한과 동일하다.
// ex) 클래스가 default 접근 제한을 가지면 기본 생성자도 default 접근 제한을 가진다.
//     클래스가 public 접근 제한을 가지면 기본 생성자도 public 접근 제한을 가진다.

// 필드타입이 boolean일 경우에는 Getter는 get으로 시작하지 않고 is로 시작하는 것이 관례이다.
// ex) public boolean isStop(){}
public class src7 {

	public static void main(String[] args) {

	}

}

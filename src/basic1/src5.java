package basic1;

// 클래스에 선언된 필드와 메소드가 모두 객체 내부에 포함되는 것은 아니다.
// 일부는 포함되겠지만, 포함이 되지 않고 클래스에 그대로 남아 있는 것도 있다.

// 객체마다 필드값이 달라야 한다면 해당 필드는 객체마다 가지고 있는 것이 맞다
// 하지만 객체의 필드값이 모두 같아야 한다면 이 필드를 객체마다 가지고 있을 필요가 없다.
// 만약 객체마다 갖고 있다면 메모리 낭비가 되며, 모든 객체의 필드값을 같게 맞추는 추가적인 작업이 필요하다
// 오히려 이런 필드는 한 곳에 위치시키고 객체들이 공유하는 것이 좋다.
// => 자바는 이런 경우를 위해 클래스 멤버를 인스턴스 멤버와 정적 멤버로 구분해서 선언할 수 있다.

// 인스턴스 멤버: 객체마다 가지고 있는 멤버(객체 없이는 사용할 수 없다)
// 정적(static) 멤버: 클래스에 위치시키고 객체들이 공유하는 멤버(객체를 생성하지 않고 사용할 수 있는 필드와 메소드)

// this: 우리가 자신을 '나'라고 가리키듯이 객체는 자신을 this라고 한다.

// 중요!!!)
// 메소드 역시 인스턴스 메소드로 선언할 것인가, 아니면 정적 메소드로 선언할 것인가의 판단 기준이 필요하다
// 인스턴스 필드를 포함하고 있다면 인스턴스 메소드로 선언하고,
// 인스턴스 필드를 포함하고 있지 않다면 정적 메소드로 선언한다.

// 정적 필드와 정적 메소드는 원칙적으로 클래스 이름으로 접근해야 하지만
// 객체 참조 변수로도 접근이 가능하다.
// 하지만 정적 요소는 클래스 이름으로 접근하는 것이 좋다.

// # 정적 메소드 선언시 주의할 점
// => 객체가 없어도 실행된다는 특징 때문에 정적 메소드를 선언할 때는 이들 내부에 인스턴스 필드나
//    인스턴스 메소드를 사용할 수 없다.
//    또한 객체 자신의 참조인 this 키워드도 사용이 불가능하다.
//    정적 메소드에서 인스턴스 멤버를 사용하고 싶다면 객체를 먼저 생성하고 참조 변수로 접근해야 한다.
//    main() 메소드도 동일한 규칙이 적용된다. main() 메소드도 정적 메소드이므로 객체 생성 없이
//    인스턴스 필드와 인스턴스 메소드를 main() 메소드에서 바로 사용할 수 없다.
class Calculator
{
	static double PI=3.14159;	// 객체마다 파이 값을 가질 필요없다
	String color;
	
	static void Method3()
	{
		Calculator obj=new Calculator();
		obj.color="red";
		obj.Method1();
	}
	
	void Method1() {}
}

public class src5 {

	public static void main(String[] args) {
		double result=10*10*Calculator.PI;
	}

}
